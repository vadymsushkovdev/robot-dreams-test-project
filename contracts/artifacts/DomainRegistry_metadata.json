{
	"compiler": {
		"version": "0.8.24+commit.e11b9ed9"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "DomainAlreadyTaken",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "reciever",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "FailedToWithdraw",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "incomingUsdc",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "expectingUsdc",
						"type": "uint256"
					}
				],
				"name": "IncorrectUsdcAmount",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "incomingValue",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "expectingValue",
						"type": "uint256"
					}
				],
				"name": "IncorrectValueAmount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidInitialization",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidPriceFromOracle",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotInitializing",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "requester",
						"type": "address"
					}
				],
				"name": "NothingToWithdraw",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "incomingDomain",
						"type": "string"
					}
				],
				"name": "ParentDomainNotFound",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "incomingValue",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "expectingValue",
						"type": "uint256"
					}
				],
				"name": "PriceEqualsZero",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "domain",
						"type": "string"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "controller",
						"type": "address"
					}
				],
				"name": "DomainRegistered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "version",
						"type": "uint64"
					}
				],
				"name": "Initialized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newPrice",
						"type": "uint256"
					}
				],
				"name": "PriceChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "reciever",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Withdrawal",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "_getEthToUsdPriceFromOracle",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "parentDomain",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "childDomain",
						"type": "string"
					}
				],
				"name": "buyChildDomainViaEth",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "parentDomain",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "childDomain",
						"type": "string"
					}
				],
				"name": "buyChildDomainViaUsdc",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "domain",
						"type": "string"
					}
				],
				"name": "buyDomainViaEth",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "domain",
						"type": "string"
					}
				],
				"name": "buyDomainViaUsdc",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "newPrice",
						"type": "uint256"
					}
				],
				"name": "changePrice",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "domain",
						"type": "string"
					}
				],
				"name": "getDomainOwner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRegistrationPriceInEth",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRegistrationPriceInUsdc",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "initialPrice",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_pricefeed",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_usdcToken",
						"type": "address"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawDomainEth",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawDomainUsdc",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawEth",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawUsdc",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Vadym Sushkov",
			"errors": {
				"DomainAlreadyTaken()": [
					{
						"details": "Error thrown when attempting to register a domain that already exists."
					}
				],
				"FailedToWithdraw(address,bytes)": [
					{
						"details": "Error thrown when the withdrawal operation fails.",
						"params": {
							"data": "The error data."
						}
					}
				],
				"IncorrectUsdcAmount(uint256,uint256)": [
					{
						"details": "Error thrown when the usdc provided is not equal to the expected amount of usdc.",
						"params": {
							"expectingUsdc": "The expected udc amount.",
							"incomingUsdc": "The value provided."
						}
					}
				],
				"IncorrectValueAmount(uint256,uint256)": [
					{
						"details": "Error thrown when the value provided is not equal to the expected value.",
						"params": {
							"expectingValue": "The expected value.",
							"incomingValue": "The value provided."
						}
					}
				],
				"InvalidInitialization()": [
					{
						"details": "The contract is already initialized."
					}
				],
				"InvalidPriceFromOracle()": [
					{
						"details": "Error thrown when price from oracle is incorrect."
					}
				],
				"NotInitializing()": [
					{
						"details": "The contract is not initializing."
					}
				],
				"NothingToWithdraw(address)": [
					{
						"details": "Error thrown when there is nothing to withdraw from the contract.",
						"params": {
							"requester": "The address of requester who request withdraw funds."
						}
					}
				],
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				],
				"ParentDomainNotFound(string)": [
					{
						"details": "Error thrown when the parent domain is not found.",
						"params": {
							"incomingDomain": "The domain for which the parent domain is not found."
						}
					}
				],
				"PriceEqualsZero(uint256,uint256)": [
					{
						"details": "Error thrown when the provided price equals to zero.",
						"params": {
							"expectingValue": "The expected value.",
							"incomingValue": "The value that caused the error."
						}
					}
				]
			},
			"events": {
				"DomainRegistered(string,address)": {
					"details": "Event emitted when a domain is registered.",
					"params": {
						"controller": "The address of the controller of the domain.",
						"domain": "The domain name."
					}
				},
				"Initialized(uint64)": {
					"details": "Triggered when the contract has been initialized or reinitialized."
				},
				"PriceChanged(uint256)": {
					"details": "Event emitted when the price for domain registration is changed.",
					"params": {
						"newPrice": "The new price of the domain registration."
					}
				},
				"Withdrawal(address,uint256)": {
					"details": "Event emitted when funds are withdrawn from the contract.",
					"params": {
						"amount": "The amount of funds withdrawn."
					}
				}
			},
			"kind": "dev",
			"methods": {
				"_getEthToUsdPriceFromOracle()": {
					"details": "Returns current Eth/Usd price"
				},
				"buyChildDomainViaEth(string,string)": {
					"details": "Allows buying a child domain under a parent domain.",
					"params": {
						"childDomain": "The name of the child domain.",
						"parentDomain": "The parent domain under which to register the child domain."
					}
				},
				"buyDomainViaEth(string)": {
					"details": "Buying a domain via eth",
					"params": {
						"domain": "The domain"
					}
				},
				"buyDomainViaUsdc(string)": {
					"details": "Buying a domain via usdc",
					"params": {
						"domain": "The domain"
					}
				},
				"changePrice(uint256)": {
					"details": "Change price for domain registration",
					"params": {
						"newPrice": "The new price of the domain"
					}
				},
				"initialize(uint256,address,address)": {
					"details": "Sets owner of the contract and price for domain registration",
					"params": {
						"initialPrice": "Sets default price for domains"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"withdrawDomainEth()": {
					"details": "Allows domain owners to withdraw their eth funds from the contract."
				},
				"withdrawDomainUsdc()": {
					"details": "Allows domain owners to withdraw their usdc funds from the contract."
				},
				"withdrawEth()": {
					"details": "Withdraw eth to the owner of the contract"
				},
				"withdrawUsdc()": {
					"details": "Withdraw usdc to the owner of the contract"
				}
			},
			"stateVariables": {
				"domainSeparator": {
					"details": "Separator used to concatenate domain names."
				},
				"priceFeed": {
					"details": "Contract to get the latest price ETH/USD."
				},
				"usdcToken": {
					"details": "Contract to interact with usdc token."
				}
			},
			"title": "Domain Registry",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"withdrawDomainEth()": {
					"notice": "This function allows domain owners to withdraw the eth funds deposited for their domains.Only the domain owner can invoke this function.If the domain owner has no funds deposited, the function reverts."
				},
				"withdrawDomainUsdc()": {
					"notice": "This function allows domain owners to withdraw the usdc funds deposited for their domains.Only the domain owner can invoke this function.If the domain owner has no funds deposited, the function reverts."
				},
				"withdrawEth()": {
					"notice": "Checks if the contract balance is not empty and then makes withdraw to \"owner\""
				},
				"withdrawUsdc()": {
					"notice": "Checks if the contract balance is not empty and then makes withdraw to \"owner\""
				}
			},
			"notice": "This contract allows registration and management of domains.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/DomainRegistry.sol": "DomainRegistry"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
			"keccak256": "0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd",
			"license": "MIT",
			"urls": [
				"bzz-raw://644cff84052e1e82b5bb502b2a46e8f142a62b0db4cd9b38200798ba8373c6f7",
				"dweb:/ipfs/QmTa99QHrJBn3SXDizquPBUiTxVCNKQrHgaWJhuds5Sce2"
			]
		},
		"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
			"keccak256": "0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a",
			"license": "MIT",
			"urls": [
				"bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6",
				"dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2"
			]
		},
		"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
			"keccak256": "0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b",
			"license": "MIT",
			"urls": [
				"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609",
				"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
			"keccak256": "0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397",
			"license": "MIT",
			"urls": [
				"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9",
				"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
				"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
			"keccak256": "0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff",
			"license": "MIT",
			"urls": [
				"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d",
				"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi"
			]
		},
		"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386",
			"license": "MIT",
			"urls": [
				"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0",
				"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721",
			"license": "MIT",
			"urls": [
				"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245",
				"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y"
			]
		},
		"contracts/DomainRegistry.sol": {
			"keccak256": "0x3384eb304f0101f2536c507b002b7c3e584dbe04699269f60aae5bcbf4be275b",
			"license": "MIT",
			"urls": [
				"bzz-raw://0f230f39ce765472c5dae569533a274e2e60774e9be95ac24532804f7f716ecc",
				"dweb:/ipfs/QmSGnscxEFk2X61mGa8PMP8zxmM5bMqd1oEMUBJb7YtK6h"
			]
		},
		"contracts/interfaces/IDomainRegistry.sol": {
			"keccak256": "0x113a92e187502c1bc85503ceb99460064c6e22fa35d9d2bfb90a042c68763ebc",
			"license": "MIT",
			"urls": [
				"bzz-raw://bc0b24722bf56c55c1602f51ce0d84a40907ebc8481f78a0318a09271abad8d4",
				"dweb:/ipfs/QmV5W8yDMUNbPTNMPpNbGFYRjCmZBgLstiseXqTQC5N83A"
			]
		}
	},
	"version": 1
}