{
	"compiler": {
		"version": "0.8.24+commit.e11b9ed9"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "parentDomain",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "childDomain",
						"type": "string"
					}
				],
				"name": "buyChildDomainViaEth",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "domain",
						"type": "string"
					}
				],
				"name": "buyDomainViaEth",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "domain",
						"type": "string"
					}
				],
				"name": "buyDomainViaUsdc",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "newPrice",
						"type": "uint256"
					}
				],
				"name": "changePrice",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawDomainEth",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawDomainUsdc",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawEth",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawUsdc",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"buyChildDomainViaEth(string,string)": {
					"details": "Allows buying a child domain under a parent domain.",
					"params": {
						"childDomain": "The name of the child domain.",
						"parentDomain": "The parent domain under which to register the child domain."
					}
				},
				"buyDomainViaEth(string)": {
					"details": "Buying a domain via eth",
					"params": {
						"domain": "The domain"
					}
				},
				"buyDomainViaUsdc(string)": {
					"details": "Buying a domain via usdc",
					"params": {
						"domain": "The domain"
					}
				},
				"changePrice(uint256)": {
					"details": "Change price for domain registration",
					"params": {
						"newPrice": "The new price of the domain"
					}
				},
				"withdrawDomainEth()": {
					"details": "Allows domain owners to withdraw their eth funds from the contract."
				},
				"withdrawDomainUsdc()": {
					"details": "Allows domain owners to withdraw their usdc funds from the contract."
				},
				"withdrawEth()": {
					"details": "Withdraw eth to the owner of the contract"
				},
				"withdrawUsdc()": {
					"details": "Withdraw usdc to the owner of the contract"
				}
			},
			"title": "Domain Registry Interface",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"withdrawDomainEth()": {
					"notice": "This function allows domain owners to withdraw the eth funds deposited for their domains.Only the domain owner can invoke this function.If the domain owner has no funds deposited, the function reverts."
				},
				"withdrawDomainUsdc()": {
					"notice": "This function allows domain owners to withdraw the usdc funds deposited for their domains.Only the domain owner can invoke this function.If the domain owner has no funds deposited, the function reverts."
				},
				"withdrawEth()": {
					"notice": "Checks if the contract balance is not empty and then makes withdraw to \"owner\""
				},
				"withdrawUsdc()": {
					"notice": "Checks if the contract balance is not empty and then makes withdraw to \"owner\""
				}
			},
			"notice": "This interface defines the methods required for interacting with a domain registry contract.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/interfaces/IDomainRegistry.sol": "IDomainRegistry"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/interfaces/IDomainRegistry.sol": {
			"keccak256": "0x113a92e187502c1bc85503ceb99460064c6e22fa35d9d2bfb90a042c68763ebc",
			"license": "MIT",
			"urls": [
				"bzz-raw://bc0b24722bf56c55c1602f51ce0d84a40907ebc8481f78a0318a09271abad8d4",
				"dweb:/ipfs/QmV5W8yDMUNbPTNMPpNbGFYRjCmZBgLstiseXqTQC5N83A"
			]
		}
	},
	"version": 1
}